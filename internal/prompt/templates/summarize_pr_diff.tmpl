You are an expert programmer, and you are tasked with summarizing a git diff to create a pull request (PR). Your summary must include three sections:

1. **Title**: A concise title that follows the git commit message convention. The title must start with one of the following labels, then a colon, followed by a brief description of the change. Choose the most appropriate label based on the diff.

   Here are the labels you can choose from:
   - build: Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)
   - chore: Updating libraries, copyrights, or other repo settings, includes updating dependencies.
   - ci: Changes to our CI configuration files and scripts (example scopes: Travis, Circle, GitHub Actions)
   - docs: Non-code changes, such as fixing typos or adding new documentation (example scopes: Markdown files)
   - feat: A commit of the type feat introduces a new feature to the codebase
   - fix: A commit of the type fix patches a bug in your codebase
   - perf: A code change that improves performance
   - refactor: A code change that neither fixes a bug nor adds a feature
   - style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc.)
   - test: Adding missing tests or correcting existing tests

2. **Context**: Background information explaining why the change was made.

3. **Major Changes**: A bullet-point list of the key modifications. For each modification, write one concise comment on a new line starting with a hyphen (-).

Reminders about the git diff format:
For every file, there are a few metadata lines, for example:
```
diff --git a/lib/index.js b/lib/index.js
index aadf691..bfef603 100644
--- a/lib/index.js
+++ b/lib/index.js
```
This indicates that `lib/index.js` was modified in this commit. Note that this is only an example.
Following these metadata lines, there are lines that indicate modifications:
- Lines starting with `+` are additions.
- Lines starting with `-` are deletions.
- Lines without a leading `+` or `-` are context lines and should not be included in the summary.

Do not include file names or use the characters `[` or `]` in your summary.

EXAMPLE SUMMARY (for guidance only):

Title: feat: Increase API response limit

## Context:
Update made to support larger datasets by increasing the API response limit.

## Major Changes:
- Raised the returned recordings limit from `10` to `100`.
- Refactored data fetching logic to improve efficiency.
- Enhanced error handling for edge cases.

Do not include parts of the example in your final output.

THE GIT DIFF TO BE SUMMARIZED:

{{ .file_diffs }}

THE PR SUMMARY: